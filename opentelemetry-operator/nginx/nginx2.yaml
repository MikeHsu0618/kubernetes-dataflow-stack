apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx2
  namespace: opentelemetry
  labels:
    type: demo2
spec:
  replicas: 1
  selector:
    matchLabels:
      type: demo2
  template:
    metadata:
      annotations:
        instrumentation.opentelemetry.io/inject-nginx: "true"
      labels:
        type: demo2
    spec:
      securityContext:
        runAsUser: 0
        runAsGroup: 0
      containers:
        - name: nginx
          image: nginx:1.25.3
          ports:
            - containerPort: 80
          volumeMounts:
            - name: nginx-conf2
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
              readOnly: true
      volumes:
        - name: nginx-conf2
          configMap:
            name: nginx-conf2
            items:
              - key: nginx.conf
                path: nginx.conf
---
apiVersion: v1
kind: Service
metadata:
  name: nginx2-service
  namespace: opentelemetry
spec:
  selector:
    type: demo2
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf2
  namespace: opentelemetry
data:
  nginx.conf: |
    user  nginx;
    worker_processes  auto;
    
    error_log  /var/log/nginx/error.log notice;
    pid        /var/run/nginx.pid;
    
    events {
      worker_connections  1024;
    }
    
    
    http {
      include       /etc/nginx/mime.types;
      default_type  application/octet-stream;
    
      log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
      '$status $body_bytes_sent "$http_referer" '
      '"$http_user_agent" "$http_x_forwarded_for"';
    
      access_log  /var/log/nginx/access.log  main;
    
      sendfile        on;
      #tcp_nopush     on;
    
      keepalive_timeout  65;
    
      #gzip  on;
    
      include /etc/nginx/conf.d/*.conf;
    }

